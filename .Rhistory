memberships = sapply(tiger_liver_data$RefSeq, function(x) {
membership = FALSE
if (x %in% ensembl_ids$refseq_mrna) {
subset_data = ensembl_ids[ensembl_ids$refseq_mrna == x, ]
membership = any(sapply(subset_data$ensembl_gene_id, function(y) y %in% tmp))
}
return(membership)
})
tmp = sapply(rownames(dds), function(x) strsplit(x, "[.]")[[1]][[1]])
memberships = sapply(tiger_liver_data$RefSeq, function(x) {
membership = FALSE
if (x %in% ensembl_ids$refseq_mrna) {
subset_data = ensembl_ids[ensembl_ids$refseq_mrna == x, ]
membership = any(sapply(subset_data$ensembl_gene_id, function(y) y %in% tmp))
}
return(membership)
})
sum(memberships)
knitr::opts_chunk$set(echo = TRUE)
# load and process counts data
counts_gene = as.matrix(read.table('counts_gene.tsv', header = T, sep = '\t'))
rownames(counts_gene) = counts_gene[, "gene_id"]
# set up count_data for DESeqDataSet
count_data = subset(counts_gene, select = c(-gene_id))
class(count_data) = "numeric"
# compute cpm matrix and summary stats
cpm = apply(count_data, 2, function(x) x/sum(x) * 10^6)
cpm_means = apply(cpm, 1, mean)
largest_mean_cpm = which.max(cpm_means)
library(pheatmap)
# transform and filter cpm matrix for heatmap
log_cpm = apply(cpm, 2, function(x) log(x+1))
cpm_sds = apply(log_cpm, 1, function(x) sd(x))
select_cpm = log_cpm[cpm_sds > 1, ]
# plot heatmap
pheatmap(select_cpm, scale = 'row', show_rownames = FALSE,
clustering_distance_rows = 'correlation', clustering_distance_cols = 'correlation')
# load metadata from SRP029880 experiment file
metadata = read.table('SRP029880.tsv', header = T, sep = '\t', stringsAsFactors = FALSE)
# cancer groups
metadata$group = sapply(metadata[, "title"], function(x) strsplit(x, " ")[[1]][[1]])
# setup col_data for DESeqDataSet
col_data = metadata[, c("title", "group")]
col_data[sapply(col_data, is.character)] = lapply(col_data[sapply(col_data, is.character)],
as.factor)
# set run names as row names
rownames(col_data) = metadata$run
# set up design formula for DESeqDataSet
design_formula = "~ group"
library(DESeq2)
library(stats)
# create a DESeqDataSet object from count data
dds = DESeqDataSetFromMatrix(countData = count_data,
colData = col_data,
design = as.formula(design_formula))
# ignore genes that don't have at least one read
dds = dds[ rowSums(DESeq2::counts(dds)) > 1, ]
dds = DESeq(dds)
# dds contents
print(dds)
# compute contrast for the "group" variable where 'normal' samples are used as the control group
DEresults_pn = results(dds, contrast = c("group", 'primary', 'normal'))
# sort results by adjusted pvalues
DEresults_pn = DEresults_pn[order(DEresults_pn$padj),]
DE_genes_pn = DEresults_pn[(DEresults_pn$padj <= 0.01) & (!is.na(DEresults_pn$padj)), ]
DE_genes_pn = DE_genes_pn[(DE_genes_pn$log2FoldChange <= -1) | (DE_genes_pn$log2FoldChange >= 1), ]
print(DE_genes_pn)
# number of DE genes
dim(DE_genes_pn)[1]
# top 5 DE genes
cbind(rownames(head(DE_genes_pn, 5)), head(DE_genes_pn, 5)$padj)
DEresults_pm = results(dds, contrast = c("group", 'primary', 'metastasized'))
DEresults_pm = DEresults_pm[order(DEresults_pm$padj),]
DE_genes_pm = DEresults_pm[(DEresults_pm$padj <= 0.01) & (!is.na(DEresults_pm$padj)), ]
DE_genes_pm = DE_genes_pm[(DE_genes_pm$log2FoldChange <= -1) | (DE_genes_pm$log2FoldChange >= 1), ]
print(DE_genes_pm)
# number of DE genes
dim(DE_genes_pm)[1]
# top 5 DE genes
cbind(rownames(head(DE_genes_pm, 5)), head(DE_genes_pm, 5)$padj)
DEresults_mn = results(dds, contrast = c("group", 'metastasized', 'normal'))
DEresults_mn = DEresults_mn[order(DEresults_mn$padj),]
DE_genes_mn = DEresults_mn[(DEresults_mn$padj <= 0.01) & (!is.na(DEresults_mn$padj)), ]
DE_genes_mn = DE_genes_mn[(DE_genes_mn$log2FoldChange <= -1) | (DE_genes_mn$log2FoldChange >= 1), ]
print(DE_genes_mn)
# number of DE genes
dim(DE_genes_mn)[1]
# top 5 DE genes
cbind(rownames(head(DE_genes_mn, 5)), head(DE_genes_mn, 5)$padj)
DE_genes_inter1 = intersect(rownames(DE_genes_mn), rownames(DE_genes_pn))
length(DE_genes_inter1)
tiger_liver_data = read.table('liver_genes.tsv', skip = 1, header = T, sep = '\t',
stringsAsFactors = FALSE, quote = "")
# conversion data from DAVID
liver_conv_data = read.table('liver_refseq2ensembl.tsv', header = T, sep = '\t', stringsAsFactors = FALSE, quote = "")
head(liver_conv_data[, c("From", "To")], 5)
# liver genes not converted by DAVID
missed_genes = tiger_liver_data$RefSeq[!sapply(tiger_liver_data$RefSeq, function(x) x %in% liver_conv_data$From)]
missed_genes
write.table(missed_genes, file = "missed_gene_list.txt",
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
# conversion data from DAVID using manually curated data from NLM (refer to "Other notes" above)
liver_conv_data2 = read.table('liver2_refseq2ensembl.tsv', header = T, sep = '\t', stringsAsFactors = FALSE, quote = "")
head(liver_conv_data2[, c("From", "To")], 5)
liver_conv = rbind(liver_conv_data, liver_conv_data2)
tmp = sapply(rownames(dds), function(x) strsplit(x, "[.]")[[1]][[1]])
memberships = sapply(tiger_liver_data$RefSeq, function(x) {
membership = FALSE
if (x %in% liver_conv$From) {
subset_data = liver_conv[liver_conv$From == x, ]
membership = any(sapply(subset_data$To, function(y) y %in% tmp))
}
return(membership)
})
library(biomaRt)
ensembl = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
attributes = c("refseq_mrna", "ensembl_gene_id")
refseq_mrna_list = missed_genes
print(refseq_mrna_list)
ensembl_ids = getBM(attributes = attributes, filters = "refseq_mrna", values = refseq_mrna_list, mart = ensembl)
print(ensembl_ids)
refseq_mrna_list = tiger_liver_data$RefSeq
print(refseq_mrna_list)
ensembl_ids = getBM(attributes = attributes, filters = "refseq_mrna", values = refseq_mrna_list, mart = ensembl)
print(ensembl_ids)
tmp = sapply(rownames(dds), function(x) strsplit(x, "[.]")[[1]][[1]])
memberships = sapply(tiger_liver_data$RefSeq, function(x) {
membership = FALSE
if (x %in% ensembl_ids$refseq_mrna) {
subset_data = ensembl_ids[ensembl_ids$refseq_mrna == x, ]
membership = any(sapply(subset_data$ensembl_gene_id, function(y) y %in% tmp))
}
return(membership)
})
sum(memberships)
attributes = c("ensembl_gene_id", "refseq_mrna")
ensembl_ids_list = ensembl_ids$ensembl_gene_id
print(ensembl_ids_list)
refseq_mrna = getBM(attributes = attributes, filters = "ensembl_gene_id", values = ensembl_ids_list, mart = ensembl)
print(refseq_mrna)
print(refseq_mrna[refseq_mrna$refseq_mrna != ""])
print(refseq_mrna[, refseq_mrna$refseq_mrna != ""])
print(refseq_mrna)
refseq_mrna$refseq_mrna
attributes = c("ensembl_gene_id", "refseq_mrna")
ensembl_ids_list = ensembl_ids$ensembl_gene_id
print(ensembl_ids_list)
refseq_mrna = getBM(attributes = attributes, filters = "ensembl_gene_id", values = ensembl_ids_list, mart = ensembl)
print(refseq_mrna[refseq_mrna$refseq_mrna != "", ])
memberships = sapply(tiger_liver_data$RefSeq, function(x) x %in% refseq_mrna$refseq_mrna)
sum(memberships)
attributes = c("ensembl_gene_id", "refseq_mrna")
ensembl_ids_list = tmp
print(ensembl_ids_list)
refseq_mrna = getBM(attributes = attributes, filters = "ensembl_gene_id", values = ensembl_ids_list, mart = ensembl)
print(refseq_mrna[refseq_mrna$refseq_mrna != "", ])
memberships = sapply(tiger_liver_data$RefSeq, function(x) x %in% refseq_mrna$refseq_mrna)
sum(memberships)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("devtools")
devtools::install_github("wjonasreger/mousePreopticR")
library(here)
library(Matrix)
library(mousePreopticR)
library(monocle3)
library(tidyr)
library(tidyverse)
## compose datasets
#     - only need to run this once after installation.
#     - may need to restart R session after composition.
composeData()
## load bio datasets
#     - mpr_matrix, mpr_genes, mpr_barcodes
#     - mpr_merfish
loadData()
library(pheatmap)
pheatmap(mpr_matrix[1:100, 1:100], scale="row")
mpr_matrix[1:5, 1:5]
mpr_matrix[1:10, 1:10]
pheatmap(mpr_matrix[1:100, 1:100], scale="row")
pheatmap(mpr_matrix[1:100, 1:10], scale="row")
pheatmap(mpr_matrix[1:100, 1:10])
pheatmap(mpr_matrix[1:100, 1:10], row.names = FALSE)
pheatmap(mpr_matrix[1:100, 1:10], show_rownames = FALSE)
pheatmap(mpr_matrix[1:100, 1:100], show_rownames = FALSE)
pheatmap(mpr_matrix[1:100, 1:100], show_rownames = FALSE, show_colnames = FALSE)
cpm = apply(mpr_matrix[1:100, 1:100], 2, function(x) x/sum(x) * 10^6)
log_cpm = apply(cpm, 2, function(x) log(x+1))
cpm_sds = apply(log_cpm, 1, function(x) sd(x))
select_cpm = log_cpm[cpm_sds > 1, ]
pheatmap(select_cpm, scale = "row", show_rownames = FALSE, show_colnames = FALSE,
clustering_distance_rows = 'correlation', clustering_distance_cols = 'correlation')
library(pheatmap)
cpm = apply(mpr_matrix, 2, function(x) x/sum(x) * 10^6)
log_cpm = apply(cpm, 2, function(x) log(x+1))
cpm_sds = apply(log_cpm, 1, function(x) sd(x))
select_cpm = log_cpm[cpm_sds > 1, ]
pheatmap(select_cpm, scale = "row", show_rownames = FALSE, show_colnames = FALSE,
clustering_distance_rows = 'correlation', clustering_distance_cols = 'correlation')
library(pheatmap)
cpm = apply(mpr_matrix[1:100, 1:100], 2, function(x) x/sum(x) * 10^6)
log_cpm = apply(cpm, 2, function(x) log(x+1))
cpm_sds = apply(log_cpm, 1, function(x) sd(x))
select_cpm = log_cpm[cpm_sds > 1, ]
pheatmap(select_cpm, scale = "row", show_rownames = FALSE, show_colnames = FALSE,
clustering_distance_rows = 'correlation', clustering_distance_cols = 'correlation')
## create a monocle CellDataSet object
cds = new_cell_data_set(expression_data = mpr_matrix,
cell_metadata = mpr_barcodes,
gene_metadata = mpr_genes)
cds
## create a monocle CellDataSet object
cds = new_cell_data_set(expression_data = mpr_matrix,
cell_metadata = mpr_barcodes,
gene_metadata = mpr_genes)
cds
## create a monocle CellDataSet object
cds = new_cell_data_set(expression_data = mpr_matrix,
cell_metadata = mpr_barcodes,
gene_metadata = mpr_genes)
cds
setwd("~/Documents/GitHub/stat530/bioinf_mouse_preoptic")
mpr_matrix@Dimnames
# read in expression matrix data from local directory (or use mpr_matrix for example)
# mpr_data = readMPR(data.dir = "mpr_GSE113576")
mpr_seurat = CreateSeuratObject(counts = mpr_matrix)
library(Seurat)
library(tidyverse)
library(dplyr)
library(patchwork)
library(monocle3)
library(SeuratWrappers)
# read in expression matrix data from local directory (or use mpr_matrix for example)
# mpr_data = readMPR(data.dir = "mpr_GSE113576")
mpr_seurat = CreateSeuratObject(counts = mpr_matrix)
# mpr_seurat = subset(mpr_seurat, subset = dpn > 0)
mpr_seurat
mpr_seurat[["percent.mt"]] <- PercentageFeatureSet(mpr_seurat, pattern = "^mt:")
mpr_seurat = subset(mpr_seurat, subset = percent.mt <= 10)
mpr_seurat
VlnPlot(mpr_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
head(sort(mpr_seurat$nCount_RNA, decreasing = TRUE), 10)
# read in expression matrix data from local directory (or use mpr_matrix for example)
# mpr_data = readMPR(data.dir = "mpr_GSE113576")
mpr_counts = mpr_matrix
mpr_counts@Dimnames[[1]] = rowData(cds)$gene_short_name
mpr_seurat = CreateSeuratObject(counts = mpr_matrix)
# mpr_seurat = subset(mpr_seurat, subset = dpn > 0)
mpr_seurat
mpr_seurat = PercentageFeatureSet(mpr_seurat, pattern = "^mt:", col.name = "percent_mt")
mpr_seurat = subset(mpr_seurat, subset = percent.mt <= 10)
mpr_seurat = PercentageFeatureSet(mpr_seurat, pattern = "^mt:", col.name = "percent_mt")
mpr_seurat = subset(mpr_seurat, subset = percent_mt <= 10)
mpr_seurat
# read in expression matrix data from local directory (or use mpr_matrix for example)
# mpr_data = readMPR(data.dir = "mpr_GSE113576")
mpr_counts = mpr_matrix
mpr_counts@Dimnames[[1]] = rowData(cds)$gene_short_name
mpr_seurat = CreateSeuratObject(counts = mpr_counts)
# mpr_seurat = subset(mpr_seurat, subset = dpn > 0)
mpr_seurat
mpr_seurat = PercentageFeatureSet(mpr_seurat, pattern = "^mt:", col.name = "percent_mt")
mpr_seurat = subset(mpr_seurat, subset = percent_mt <= 10)
mpr_seurat
# read in expression matrix data from local directory (or use mpr_matrix for example)
# mpr_data = readMPR(data.dir = "mpr_GSE113576")
mpr_seurat = CreateSeuratObject(counts = mpr_matrix)
# mpr_seurat = subset(mpr_seurat, subset = dpn > 0)
mpr_seurat
is_mito = grep("^mt:", rowData(cds)$gene_short_name)
sum(is_mito)
is_mito = grep("^MT-", rowData(cds)$gene_short_name)
sum(is_mito)
VlnPlot(mpr_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
cutoff = 7000
mpr_seurat = subset(mpr_seurat, subset = nCount_RNA <= cutoff)
mpr_seurat
VlnPlot(mpr_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent_mt"), ncol = 3)
cutoff = 7000
mpr_seurat = subset(mpr_seurat, subset = nCount_RNA <= cutoff)
mpr_seurat
# normalize
mpr_seurat = NormalizeData(mpr_seurat, verbose = FALSE)
# scale
all_genes = rownames(mpr_seurat)
mpr_seurat = ScaleData(mpr_seurat, features = all_genes, verbose = FALSE)
# most variable genes
mpr_seurat = FindVariableFeatures(mpr_seurat, verbose = FALSE)
# most variable genes
most_variable = head(VariableFeatures(mpr_seurat), 5)
most_variable
# linear dimensional reduction with PCA
mpr_seurat = RunPCA(mpr_seurat, verbose = FALSE)
# linear dimensional reduction with PCA
mpr_seurat = RunPCA(mpr_seurat, verbose = FALSE)
# ElbowPlot(mpr_seura
ElbowPlot(mpr_seurat)
# find neighbors
mpr_seurat = FindNeighbors(mpr_seurat, dims = 1:10, verbose = FALSE)
# find neighbors
mpr_seurat = FindNeighbors(mpr_seurat, dims = 1:10, verbose = FALSE)
# find clusters
mpr_seurat = FindClusters(mpr_seurat, resolution = 1.2, verbose = TRUE)
# find clusters
mpr_seurat = FindClusters(mpr_seurat, resolution = 1.2, verbose = TRUE)
table(Idents(mpr_seurat))
# find neighbors
mpr_seurat = FindNeighbors(mpr_seurat, dims = 1:10, verbose = FALSE)
# find clusters
mpr_seurat = FindClusters(mpr_seurat, resolution = 0.5, verbose = TRUE)
table(Idents(mpr_seurat))
# find neighbors
mpr_seurat = FindNeighbors(mpr_seurat, dims = 1:10, verbose = FALSE)
# find clusters
mpr_seurat = FindClusters(mpr_seurat, resolution = 0.2, verbose = TRUE)
table(Idents(mpr_seurat))
# find neighbors
mpr_seurat = FindNeighbors(mpr_seurat, dims = 1:10, verbose = FALSE)
# find clusters
mpr_seurat = FindClusters(mpr_seurat, resolution = 0.1, verbose = TRUE)
table(Idents(mpr_seurat))
# find neighbors
mpr_seurat = FindNeighbors(mpr_seurat, dims = 1:10, verbose = FALSE)
# find clusters
mpr_seurat = FindClusters(mpr_seurat, resolution = 0.125, verbose = TRUE)
table(Idents(mpr_seurat))
# find neighbors
mpr_seurat = FindNeighbors(mpr_seurat, dims = 1:10, verbose = FALSE)
# find clusters
mpr_seurat = FindClusters(mpr_seurat, resolution = 0.12, verbose = TRUE)
table(Idents(mpr_seurat))
# find neighbors
mpr_seurat = FindNeighbors(mpr_seurat, dims = 1:10, verbose = FALSE)
# find clusters
mpr_seurat = FindClusters(mpr_seurat, resolution = 0.11, verbose = TRUE)
table(Idents(mpr_seurat))
# find neighbors
mpr_seurat = FindNeighbors(mpr_seurat, dims = 1:10, verbose = FALSE)
# find clusters
mpr_seurat = FindClusters(mpr_seurat, resolution = 0.12, verbose = TRUE)
table(Idents(mpr_seurat))
mpr_seurat = RunUMAP(mpr_seurat, dims = 1:10, verbose = FALSE)
DimPlot(mpr_seurat, reduction = "umap", label = TRUE)
mpr_markers = FindAllMarkers(mpr_seurat, verbose = FALSE)
diff_exp = mpr_markers %>%
group_by(cluster) %>%
filter(avg_log2FC >= 1.5) %>%
filter(p_val_adj <= 0.05) %>%
arrange(desc(avg_log2FC))
head(diff_exp)
table(diff_exp$cluster)
FeaturePlot(dmnb, features = diff_exp$gene[1], combine = TRUE)
FeaturePlot(mpr_seurat, features = diff_exp$gene[1], combine = TRUE)
dryad = utils::read.table(file = "merfish.csv", header = TRUE, sep = ",")
summary(dryad[, c("Centroid_X", "Centroid_Y")])
summary(dryad[, c("Centroid_X", "Centroid_Y")])
xthres = 5000
xind = dryad$Centroid_X < xthres && dryad$Centroid_X > xthres
xind = (dryad$Centroid_X < xthres) && (dryad$Centroid_X > xthres)
xind
xind = which(dryad$Centroid_X < xthres) && which(dryad$Centroid_X > xthres)
xind
dryad$Centroid_X
dryad$Centroid_X < xthres
dryad$Centroid_X < xthres && dryad$Centroid_X > xthres
(dryad$Centroid_X < xthres) && (dryad$Centroid_X > xthres)
(dryad$Centroid_X < xthres) & (dryad$Centroid_X > xthres)
xind = dryad$Centroid_X < xthres & dryad$Centroid_X > xthres
xind
xind = (dryad$Centroid_X < xthres) & (dryad$Centroid_X > xthres)
xind
xthres = 5000
xind = (dryad$Centroid_X < xthres) & (dryad$Centroid_X > -xthres)
ythres = 5000
yind = (dryad$Centroid_Y < ythres) & (dryad$Centroid_Y > -ythres)
tmp_dryad = dryad[, xind & yind]
xthres = 5000
xind = (dryad$Centroid_X < xthres) & (dryad$Centroid_X > -xthres)
ythres = 5000
yind = (dryad$Centroid_Y < ythres) & (dryad$Centroid_Y > -ythres)
tmp_dryad = dryad[xind & yind, ]
dim(tmp_dryad)
xthres = 5000
xind = (dryad$Centroid_X < xthres) & (dryad$Centroid_X > -xthres)
ythres = 5000
yind = (dryad$Centroid_Y < ythres) & (dryad$Centroid_Y > -ythres)
tmp_dryad = dryad[xind & yind, ]
summary(dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(0, 5000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-5000, 2000)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(-5000, 0)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-5000, 2000)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(-4000, -1000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-2000, 2000)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(-3500, -1000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-500, 1500)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(-3000, -2000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-500, 1500)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(-3000, -2000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-500, 500)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(-2500, -2000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-250, 250)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(-2750, -2000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-250, 500)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(-2650, -2000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-250, 400)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
xlim = c(-2500, -2000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-250, 400)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
xlim = c(-2750, -2000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-250, 250)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
xlim = c(-2500, -2000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-250, 250)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
plot(tmp_dryad$Centroid_X, tmp_dryad$Centroid_Y)
write.table(tmp_dryad, "hi.tsv", sep = "\t", row.names = FALSE, col.names = TRUE)
dryad_read = utils::read.table(file = "hi.tsv", header = TRUE, sep = "\t")
head(dryad_read)
tableSplit("mpr_merfish_sample.tsv", 2, axis = 0, header = FALSE, sep = '\t', verbose = FALSE)
tableSplit("mpr_merfish_sample.tsv", 3, axis = 0, header = FALSE, sep = '\t', verbose = FALSE)
knitr::opts_chunk$set(echo = TRUE)
?filter_genes
library(tidyverse)
library(dplyr)
library(SpatialExperiment)
library(STexampleData)
library(ggspavis)
library(scran)
library(nnSVG)
library(MerfishData)
library(ExperimentHub)
?filter_genes
xlim = c(-2500, -2000)
xind = (dryad$Centroid_X < xlim[2]) & (dryad$Centroid_X > xlim[1])
ylim = c(-250, 250)
yind = (dryad$Centroid_Y < ylim[2]) & (dryad$Centroid_Y > ylim[1])
tmp_dryad = dryad[xind & yind, ]
summary(tmp_dryad[, c("Centroid_X", "Centroid_Y")])
dim(tmp_dryad)
write.table(tmp_dryad, "mpr_merfish_sample.tsv", sep = "\t", row.names = FALSE, col.names = TRUE)
dryad_read = utils::read.table(file = "mpr_merfish_sample.tsv", header = TRUE, sep = "\t")
head(dryad_read)
tableSplit("mpr_merfish_sample.tsv", 3, axis = 0, header = FALSE, sep = '\t', verbose = FALSE)
