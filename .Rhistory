df_tmp = df[, idx]
}
file_path = file.path(data_dir, sprintf("comp_%s.csv", iter))
write.csv(df_tmp, file_path, row.names = FALSE)
iter = iter + 1
}
}
data_file = "Moffitt_and_Bambah-Mukku_et_al_merfish_all_cells.csv"
dataSplit(data_file, 22)
ceiling(10, 3)
ceiling(10 / 3)
dataSplit = function(data_file, nb_comp, axis = 0) {
# create data directory
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
dir.create(data_dir, showWarnings = FALSE)
# load data
df = read.csv(data_file)
size = ifelse(axis == 0, nrow(df), ncol(df))
comp_size = ceiling(size/nb_comp)
# subset data
continue = TRUE; iter = 1
while (continue) {
# indexes
start_index = (iter - 1)*comp_size + 1
end_index = iter*comp_size
if (end_index > size) {continue = FALSE; end_index = size}
idx = start_index:end_index
# save data subset
if (axis == 0) {
df_tmp = df[idx, ]
} else {
df_tmp = df[, idx]
}
file_path = file.path(data_dir, sprintf("comp_%s.csv", iter))
write.csv(df_tmp, file_path, row.names = FALSE)
iter = iter + 1
}
}
dataSplit = function(data_file, nb_comp, axis = 0) {
# create data directory
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
dir.create(data_dir, showWarnings = FALSE)
# load data
df = read.csv(data_file)
size = ifelse(axis == 0, nrow(df), ncol(df))
comp_size = ceiling(size/nb_comp)
# subset data
continue = TRUE; iter = 1
while (continue) {
# indexes
start_index = (iter - 1)*comp_size + 1
end_index = iter*comp_size
if (end_index > size) {continue = FALSE; end_index = size}
idx = start_index:end_index
# save data subset
if (axis == 0) {
df_tmp = df[idx, ]
} else {
df_tmp = df[, idx]
}
file_path = file.path(data_dir, sprintf("comp_%s.csv", iter))
write.csv(df_tmp, file_path, row.names = FALSE)
iter = iter + 1
}
}
data_file = "Moffitt_and_Bambah-Mukku_et_al_merfish_all_cells.csv"
dataSplit(data_file, 22)
list.files(data_dir)
list.files(data_dir)[1]
strsplit(list.files(data_dir)[1], "[._]")
typeof(df)
df
typeof(df_tmp)
dataMerge = function(data_dir) {
df = c()
file_list = list.files(data_dir)
for (iter in 1:length(file_list)) {
data_file = sprintf("comp_%s.csv", iter)
df_tmp = read.csv(data_file)
df = rbind(df, df_tmp)
}
return (df)
}
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
df = dataMerge(data_dir)
dataMerge = function(data_dir) {
df = c()
file_list = list.files(data_dir)
for (iter in 1:length(file_list)) {
data_file = file.path(data_dir, sprintf("comp_%s.csv", iter))
df_tmp = read.csv(data_file)
df = rbind(df, df_tmp)
}
return (df)
}
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
df = dataMerge(data_dir)
nrow(df)
ncol(df)
library(Matrix)
readMM('GSE113576_matrix.mtx')
mat = readMM('GSE113576_matrix.mtx')
mat
mat.signature(from = "dgTMatrix", to = "dgRMatrix")
mat@i
mat@x
mat@Dim
mat@j
mat@i
mat@Dimnames
mat@factors
typeof(mat)
mat
mat@Dim
mat_tmp = new("dgTMatrix",
i = mat@i,
j = mat@j,
x = mat@x,
Dim = mat@Dim)
mat_tmp
mat == mat_tmp
View(df)
View(df_tmp)
length(mat@i)
mat@i
write.table(mat@i, file = "i.txt",
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
length(mat@i)
length(mat@j)
length(mat@x)
mat@Dim
write.table(mat@j, file = "j.txt",
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
matrixDataSplit = function(data_file, nb_comp) {
# create data directory
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
dir.create(data_dir, showWarnings = FALSE)
# load data
mat = readMM(data_file)
# df = read.csv(data_file)
size = length(mat@i)
comp_size = ceiling(size/nb_comp)
# subset data
continue = TRUE; iter = 1
while (continue) {
# indexes
start_index = (iter - 1)*comp_size + 1
end_index = iter*comp_size
if (end_index > size) {continue = FALSE; end_index = size}
idx = start_index:end_index
# save data subset
i_tmp = mat@i[idx]
j_tmp = mat@j[idx]
x_tmp = mat@x[idx]
i_file_path = file.path(data_dir, sprintf("i_comp_%s.csv", iter))
j_file_path = file.path(data_dir, sprintf("j_comp_%s.csv", iter))
x_file_path = file.path(data_dir, sprintf("x_comp_%s.csv", iter))
write.csv(i_tmp, i_file_path, row.names = FALSE)
write.csv(j_tmp, j_file_path, row.names = FALSE)
write.csv(x_tmp, x_file_path, row.names = FALSE)
iter = iter + 1
}
}
write.table(mat@x, file = "j.txt",
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
mat
write.table(mat@j, file = "j.txt",
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
write.table(mat@x, file = "x.txt",
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
matrixDataSplit = function(data_file, nb_comp) {
# create data directory
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
dir.create(data_dir, showWarnings = FALSE)
# load data
mat = readMM(data_file)
# df = read.csv(data_file)
size = length(mat@i)
comp_size = ceiling(size/nb_comp)
# subset data
continue = TRUE; iter = 1
while (continue) {
# indexes
start_index = (iter - 1)*comp_size + 1
end_index = iter*comp_size
if (end_index > size) {continue = FALSE; end_index = size}
idx = start_index:end_index
# save data subset
write.table(mat@i[idx], file = file.path(data_dir, sprintf("i_comp_%s.csv", iter)),
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
write.table(mat@j[idx], file = file.path(data_dir, sprintf("j_comp_%s.csv", iter)),
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
write.table(mat@x[idx], file = file.path(data_dir, sprintf("x_comp_%s.csv", iter)),
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
iter = iter + 1
}
}
# matrixDataSplit implementation on large data files for github storage
#
# url: https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE113576&format=file&file=GSE113576%5Fmatrix%2Emtx%2Egz
data_file = "GSE113576_matrix.mtx"
matrixDataSplit(data_file, 22)
matrixDataSplit(data_file, 10)
# matrixDataSplit implementation on large data files for github storage
#
# url: https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE113576&format=file&file=GSE113576%5Fmatrix%2Emtx%2Egz
data_file = "GSE113576_matrix.mtx"
matrixDataSplit(data_file, 10)
matrixDataSplit = function(data_file, nb_comp) {
# create data directory
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
dir.create(data_dir, showWarnings = FALSE)
# load data
mat = readMM(data_file)
# df = read.csv(data_file)
size = length(mat@i)
comp_size = ceiling(size/nb_comp)
# subset data
continue = TRUE; iter = 1
while (continue) {
# indexes
start_index = (iter - 1)*comp_size + 1
end_index = iter*comp_size
if (end_index > size) {continue = FALSE; end_index = size}
idx = start_index:end_index
# save data subset
write.table(mat@i[idx], file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)),
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
write.table(mat@j[idx], file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)),
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
write.table(mat@x[idx], file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)),
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
iter = iter + 1
}
write.table(mat@Dim, file = file.path(data_dir, "Dim.txt"),
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\n")
}
# matrixDataSplit implementation on large data files for github storage
#
# url: https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE113576&format=file&file=GSE113576%5Fmatrix%2Emtx%2Egz
data_file = "GSE113576_matrix.mtx"
matrixDataSplit(data_file, 10)
character
scan(file = "x_comp_1.txt", what = character())
scan(file = "GSE113576_matrix/x_comp_1.txt", what = character())
scan(file = "GSE113576_matrix/x_comp_1.txt")
matrixDataMerge = function(data_dir, axis = 0) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter))))
j = c(i, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter))))
x = c(i, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter))))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"))
mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (mat)
}
# csvDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1); data_dir
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter))))
j = c(i, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter))))
x = c(i, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter))))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"))
mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (mat)
}
# csvDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1); data_dir
mat = matrixDataMerge(data_dir)
scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)))
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter))), quiet = TRUE)
j = c(i, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter))), quiet = TRUE)
x = c(i, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter))), quiet = TRUE)
}
Dim = scan(file = file.path(data_dir, "Dim.txt"))
mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (mat)
}
# csvDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1); data_dir
mat = matrixDataMerge(data_dir)
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)), quiet = TRUE))
j = c(i, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)), quiet = TRUE))
x = c(i, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)), quiet = TRUE))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"))
mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (mat)
}
# csvDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1); data_dir
mat = matrixDataMerge(data_dir)
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
j = c(i, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
x = c(i, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"))
mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (mat)
}
# csvDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1); data_dir
mat = matrixDataMerge(data_dir)
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
j = c(i, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
x = c(i, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"), what = integer(), quiet = TRUE)
mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (mat)
}
# matrixDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
mat = matrixDataMerge(data_dir)
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
j = c(i, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
x = c(i, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)), what = double(), quiet = TRUE))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"), what = integer(), quiet = TRUE)
mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (mat)
}
# matrixDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
mat = matrixDataMerge(data_dir)
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
j = c(i, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
x = c(i, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)), what = double(), quiet = TRUE))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"), what = integer(), quiet = TRUE)
# mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (list(i, j, k, Dim))
}
# matrixDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
mat = matrixDataMerge(data_dir)
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
j = c(i, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
x = c(i, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)), what = double(), quiet = TRUE))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"), what = integer(), quiet = TRUE)
# mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (list(i, j, x, Dim))
}
# matrixDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
mat = matrixDataMerge(data_dir)
data_file
mat1 = readMM(data_file)
length(mat1@i)
length(mat[1])
length(mat[[1]])
length(mat[[2]])
length(mat1@j)
length(mat1@x)
length(mat[[3]])
length(mat1@Dim)
length(mat[[4]])
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
j = c(j, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
x = c(x, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)), what = double(), quiet = TRUE))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"), what = integer(), quiet = TRUE)
# mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (list(i, j, x, Dim))
}
# matrixDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
j = c(j, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
x = c(x, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)), what = double(), quiet = TRUE))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"), what = integer(), quiet = TRUE)
mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (list(i, j, x, Dim))
}
# matrixDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
mat = matrixDataMerge(data_dir)
length(mat@i)
matrixDataMerge = function(data_dir) {
i = c(); j = c(); x = c()
file_list = list.files(data_dir)
for (iter in 1:((length(file_list)-1)/3)) {
i = c(i, scan(file = file.path(data_dir, sprintf("i_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
j = c(j, scan(file = file.path(data_dir, sprintf("j_comp_%s.txt", iter)), what = integer(), quiet = TRUE))
x = c(x, scan(file = file.path(data_dir, sprintf("x_comp_%s.txt", iter)), what = double(), quiet = TRUE))
}
Dim = scan(file = file.path(data_dir, "Dim.txt"), what = integer(), quiet = TRUE)
mat = new("dgTMatrix", i = i, j = j, x = x, Dim = Dim)
return (mat)
}
# matrixDataMerge implementation for large data analysis
#
data_dir = head(strsplit(data_file, "[.]")[[1]], -1)
mat = matrixDataMerge(data_dir)
length(mat@i)
length(mat@j)
length(mat@x)
length(mat@Dim)
knitr::opts_chunk$set(echo = TRUE)
source("lib/data_split_merge.R")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix/")
setwd("~/Documents/GitHub/stat530/bioinf_mouse_preoptic")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix/")
source("lib/data_split_merge.R")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix/")
# load GSE113576 Matrix data
df = csvDataMerge("GSE113576_matrix/")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix")
source("lib/data_split_merge.R")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix")
source("lib/data_split_merge.R")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix")
source("lib/data_split_merge.R")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix")
getwd()
paste0(getwd(), "/hi")
paste0(getwd(), "/raw/GSE113576_matrix")
source("lib/data_split_merge.R")
# load GSE113576 Matrix data
df = csvDataMerge(paste0(getwd(), "/raw/GSE113576_matrix"))
source("lib/data_split_merge.R")
paste0(getwd(), "/raw/GSE113576_matrix")
paste0(getwd(), "/raw/GSE113576_matrix/")
# load GSE113576 Matrix data
df = csvDataMerge(paste0(getwd(), "/raw/GSE113576_matrix/"))
# load GSE113576 Matrix data
df = csvDataMerge(paste0(getwd(), "/raw/GSE113576_matrix"))
# load GSE113576 Matrix data
df = csvDataMerge(raw/GSE113576_matrix")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix")
source("lib/data_split_merge.R")
paste0(getwd(), "/raw/GSE113576_matrix/")
# load GSE113576 Matrix data
df = csvDataMerge("raw/GSE113576_matrix")
# load GSE113576 Matrix data
df = csvDataMerge(paste0(getwd(), "/raw/GSE113576_matrix"))
source("lib/data_split_merge.R")
# load GSE113576 Matrix data
df = matrixDataMerge("raw/GSE113576_matrix")
source("lib/data_split_merge.R")
# load GSE113576 Matrix data
mat = matrixDataMerge("raw/GSE113576_matrix")
# load Merfish all cells data
df = csvDataMerge("raw/Moffitt_and_Bambah-Mukku_et_al_merfish_all_cells")
source("lib/data_split_merge.R")
# load GSE113576 Matrix data
mat = matrixDataMerge("raw/GSE113576_matrix")
